// Code generated by protoc-gen-go. DO NOT EDIT.
// source: php.proto

package command

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WinType int32

const (
	WinType_NO_WIN    WinType = 0
	WinType_SMALL_WIN WinType = 1
	WinType_BIG_WIN   WinType = 2
	WinType_MEGA_WIN  WinType = 3
	WinType_SUPER_WIN WinType = 4
)

var WinType_name = map[int32]string{
	0: "NO_WIN",
	1: "SMALL_WIN",
	2: "BIG_WIN",
	3: "MEGA_WIN",
	4: "SUPER_WIN",
}

var WinType_value = map[string]int32{
	"NO_WIN":    0,
	"SMALL_WIN": 1,
	"BIG_WIN":   2,
	"MEGA_WIN":  3,
	"SUPER_WIN": 4,
}

func (x WinType) String() string {
	return proto.EnumName(WinType_name, int32(x))
}

func (WinType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a074f28c2900ffa7, []int{0}
}

type SlotsDebug struct {
	Mid                  int32    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SlotsDebug) Reset()         { *m = SlotsDebug{} }
func (m *SlotsDebug) String() string { return proto.CompactTextString(m) }
func (*SlotsDebug) ProtoMessage()    {}
func (*SlotsDebug) Descriptor() ([]byte, []int) {
	return fileDescriptor_a074f28c2900ffa7, []int{0}
}

func (m *SlotsDebug) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SlotsDebug.Unmarshal(m, b)
}
func (m *SlotsDebug) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SlotsDebug.Marshal(b, m, deterministic)
}
func (m *SlotsDebug) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlotsDebug.Merge(m, src)
}
func (m *SlotsDebug) XXX_Size() int {
	return xxx_messageInfo_SlotsDebug.Size(m)
}
func (m *SlotsDebug) XXX_DiscardUnknown() {
	xxx_messageInfo_SlotsDebug.DiscardUnknown(m)
}

var xxx_messageInfo_SlotsDebug proto.InternalMessageInfo

func (m *SlotsDebug) GetMid() int32 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *SlotsDebug) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

//日志格式
type SlotsLog struct {
	Pid                  int32        `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	ServerId             int32        `protobuf:"varint,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
	ThemeId              int32        `protobuf:"varint,3,opt,name=themeId,proto3" json:"themeId,omitempty"`
	Uid                  int32        `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	UserMoney            int64        `protobuf:"varint,5,opt,name=userMoney,proto3" json:"userMoney,omitempty"`
	LineCount            int32        `protobuf:"varint,6,opt,name=lineCount,proto3" json:"lineCount,omitempty"`
	LineBetMoney         int64        `protobuf:"varint,7,opt,name=lineBetMoney,proto3" json:"lineBetMoney,omitempty"`
	TotalBetMoney        int64        `protobuf:"varint,8,opt,name=totalBetMoney,proto3" json:"totalBetMoney,omitempty"`
	Result               []*SlotsCol  `protobuf:"bytes,9,rep,name=result,proto3" json:"result,omitempty"`
	Lines                []*SlotsLine `protobuf:"bytes,10,rep,name=lines,proto3" json:"lines,omitempty"`
	Odds                 int32        `protobuf:"varint,11,opt,name=odds,proto3" json:"odds,omitempty"`
	WinMoney             int64        `protobuf:"varint,12,opt,name=winMoney,proto3" json:"winMoney,omitempty"`
	WType                WinType      `protobuf:"varint,13,opt,name=wType,proto3,enum=command.WinType" json:"wType,omitempty"`
	IsFree               int32        `protobuf:"varint,14,opt,name=isFree,proto3" json:"isFree,omitempty"`
	GotFreecount         int32        `protobuf:"varint,15,opt,name=gotFreecount,proto3" json:"gotFreecount,omitempty"`
	RestFreeCount        int32        `protobuf:"varint,16,opt,name=restFreeCount,proto3" json:"restFreeCount,omitempty"`
	TotalFreeWin         int64        `protobuf:"varint,17,opt,name=totalFreeWin,proto3" json:"totalFreeWin,omitempty"`
	JackpotType          int32        `protobuf:"varint,18,opt,name=jackpotType,proto3" json:"jackpotType,omitempty"`
	JackpotMoney         int64        `protobuf:"varint,19,opt,name=jackpotMoney,proto3" json:"jackpotMoney,omitempty"`
	IsPlaySmallGame      int32        `protobuf:"varint,20,opt,name=IsPlaySmallGame,proto3" json:"IsPlaySmallGame,omitempty"`
	SmallGame1Odds       int32        `protobuf:"varint,21,opt,name=SmallGame1Odds,proto3" json:"SmallGame1Odds,omitempty"`
	SmallGame1Win        int64        `protobuf:"varint,22,opt,name=SmallGame1Win,proto3" json:"SmallGame1Win,omitempty"`
	SmallGame1Type       string       `protobuf:"bytes,23,opt,name=SmallGame1Type,proto3" json:"SmallGame1Type,omitempty"`
	SmallGame2Odds       int32        `protobuf:"varint,24,opt,name=SmallGame2Odds,proto3" json:"SmallGame2Odds,omitempty"`
	SmallGame2Win        int64        `protobuf:"varint,25,opt,name=SmallGame2Win,proto3" json:"SmallGame2Win,omitempty"`
	SmallGame2Type       string       `protobuf:"bytes,26,opt,name=SmallGame2Type,proto3" json:"SmallGame2Type,omitempty"`
	RoundId              int32        `protobuf:"varint,27,opt,name=roundId,proto3" json:"roundId,omitempty"`
	BonusCount           int32        `protobuf:"varint,28,opt,name=bonusCount,proto3" json:"bonusCount,omitempty"`
	ScatterCount         int32        `protobuf:"varint,29,opt,name=scatterCount,proto3" json:"scatterCount,omitempty"`
	WildCount            int32        `protobuf:"varint,30,opt,name=wildCount,proto3" json:"wildCount,omitempty"`
	BigWinMoney          int64        `protobuf:"varint,31,opt,name=bigWinMoney,proto3" json:"bigWinMoney,omitempty"`
	FeatureType          string       `protobuf:"bytes,32,opt,name=featureType,proto3" json:"featureType,omitempty"`
	Role                 int32        `protobuf:"varint,33,opt,name=role,proto3" json:"role,omitempty"`
	Language             string       `protobuf:"bytes,34,opt,name=language,proto3" json:"language,omitempty"`
	SpinTime             int32        `protobuf:"varint,35,opt,name=spinTime,proto3" json:"spinTime,omitempty"`
	Unid                 int32        `protobuf:"varint,36,opt,name=unid,proto3" json:"unid,omitempty"`
	UserLevel            int32        `protobuf:"varint,37,opt,name=userLevel,proto3" json:"userLevel,omitempty"`
	IsControl            int32        `protobuf:"varint,38,opt,name=isControl,proto3" json:"isControl,omitempty"`
	IsOpenControl        int32        `protobuf:"varint,39,opt,name=isOpenControl,proto3" json:"isOpenControl,omitempty"`
	IsFreeCard           int32        `protobuf:"varint,40,opt,name=isFreeCard,proto3" json:"isFreeCard,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SlotsLog) Reset()         { *m = SlotsLog{} }
func (m *SlotsLog) String() string { return proto.CompactTextString(m) }
func (*SlotsLog) ProtoMessage()    {}
func (*SlotsLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_a074f28c2900ffa7, []int{1}
}

func (m *SlotsLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SlotsLog.Unmarshal(m, b)
}
func (m *SlotsLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SlotsLog.Marshal(b, m, deterministic)
}
func (m *SlotsLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlotsLog.Merge(m, src)
}
func (m *SlotsLog) XXX_Size() int {
	return xxx_messageInfo_SlotsLog.Size(m)
}
func (m *SlotsLog) XXX_DiscardUnknown() {
	xxx_messageInfo_SlotsLog.DiscardUnknown(m)
}

var xxx_messageInfo_SlotsLog proto.InternalMessageInfo

func (m *SlotsLog) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *SlotsLog) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *SlotsLog) GetThemeId() int32 {
	if m != nil {
		return m.ThemeId
	}
	return 0
}

func (m *SlotsLog) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *SlotsLog) GetUserMoney() int64 {
	if m != nil {
		return m.UserMoney
	}
	return 0
}

func (m *SlotsLog) GetLineCount() int32 {
	if m != nil {
		return m.LineCount
	}
	return 0
}

func (m *SlotsLog) GetLineBetMoney() int64 {
	if m != nil {
		return m.LineBetMoney
	}
	return 0
}

func (m *SlotsLog) GetTotalBetMoney() int64 {
	if m != nil {
		return m.TotalBetMoney
	}
	return 0
}

func (m *SlotsLog) GetResult() []*SlotsCol {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *SlotsLog) GetLines() []*SlotsLine {
	if m != nil {
		return m.Lines
	}
	return nil
}

func (m *SlotsLog) GetOdds() int32 {
	if m != nil {
		return m.Odds
	}
	return 0
}

func (m *SlotsLog) GetWinMoney() int64 {
	if m != nil {
		return m.WinMoney
	}
	return 0
}

func (m *SlotsLog) GetWType() WinType {
	if m != nil {
		return m.WType
	}
	return WinType_NO_WIN
}

func (m *SlotsLog) GetIsFree() int32 {
	if m != nil {
		return m.IsFree
	}
	return 0
}

func (m *SlotsLog) GetGotFreecount() int32 {
	if m != nil {
		return m.GotFreecount
	}
	return 0
}

func (m *SlotsLog) GetRestFreeCount() int32 {
	if m != nil {
		return m.RestFreeCount
	}
	return 0
}

func (m *SlotsLog) GetTotalFreeWin() int64 {
	if m != nil {
		return m.TotalFreeWin
	}
	return 0
}

func (m *SlotsLog) GetJackpotType() int32 {
	if m != nil {
		return m.JackpotType
	}
	return 0
}

func (m *SlotsLog) GetJackpotMoney() int64 {
	if m != nil {
		return m.JackpotMoney
	}
	return 0
}

func (m *SlotsLog) GetIsPlaySmallGame() int32 {
	if m != nil {
		return m.IsPlaySmallGame
	}
	return 0
}

func (m *SlotsLog) GetSmallGame1Odds() int32 {
	if m != nil {
		return m.SmallGame1Odds
	}
	return 0
}

func (m *SlotsLog) GetSmallGame1Win() int64 {
	if m != nil {
		return m.SmallGame1Win
	}
	return 0
}

func (m *SlotsLog) GetSmallGame1Type() string {
	if m != nil {
		return m.SmallGame1Type
	}
	return ""
}

func (m *SlotsLog) GetSmallGame2Odds() int32 {
	if m != nil {
		return m.SmallGame2Odds
	}
	return 0
}

func (m *SlotsLog) GetSmallGame2Win() int64 {
	if m != nil {
		return m.SmallGame2Win
	}
	return 0
}

func (m *SlotsLog) GetSmallGame2Type() string {
	if m != nil {
		return m.SmallGame2Type
	}
	return ""
}

func (m *SlotsLog) GetRoundId() int32 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func (m *SlotsLog) GetBonusCount() int32 {
	if m != nil {
		return m.BonusCount
	}
	return 0
}

func (m *SlotsLog) GetScatterCount() int32 {
	if m != nil {
		return m.ScatterCount
	}
	return 0
}

func (m *SlotsLog) GetWildCount() int32 {
	if m != nil {
		return m.WildCount
	}
	return 0
}

func (m *SlotsLog) GetBigWinMoney() int64 {
	if m != nil {
		return m.BigWinMoney
	}
	return 0
}

func (m *SlotsLog) GetFeatureType() string {
	if m != nil {
		return m.FeatureType
	}
	return ""
}

func (m *SlotsLog) GetRole() int32 {
	if m != nil {
		return m.Role
	}
	return 0
}

func (m *SlotsLog) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *SlotsLog) GetSpinTime() int32 {
	if m != nil {
		return m.SpinTime
	}
	return 0
}

func (m *SlotsLog) GetUnid() int32 {
	if m != nil {
		return m.Unid
	}
	return 0
}

func (m *SlotsLog) GetUserLevel() int32 {
	if m != nil {
		return m.UserLevel
	}
	return 0
}

func (m *SlotsLog) GetIsControl() int32 {
	if m != nil {
		return m.IsControl
	}
	return 0
}

func (m *SlotsLog) GetIsOpenControl() int32 {
	if m != nil {
		return m.IsOpenControl
	}
	return 0
}

func (m *SlotsLog) GetIsFreeCard() int32 {
	if m != nil {
		return m.IsFreeCard
	}
	return 0
}

type BaccaratTableLog struct {
	UserLogs             []*BaccaratUserLog `protobuf:"bytes,1,rep,name=userLogs,proto3" json:"userLogs,omitempty"`
	DealerCards          string             `protobuf:"bytes,11,opt,name=dealerCards,proto3" json:"dealerCards,omitempty"`
	PlayerCards          string             `protobuf:"bytes,12,opt,name=playerCards,proto3" json:"playerCards,omitempty"`
	SettleTime           int32              `protobuf:"varint,13,opt,name=settleTime,proto3" json:"settleTime,omitempty"`
	RoundId              int64              `protobuf:"varint,14,opt,name=roundId,proto3" json:"roundId,omitempty"`
	DealerPoints         int32              `protobuf:"varint,15,opt,name=dealerPoints,proto3" json:"dealerPoints,omitempty"`
	PlayerPoints         int32              `protobuf:"varint,16,opt,name=playerPoints,proto3" json:"playerPoints,omitempty"`
	MoneyPot1            int64              `protobuf:"varint,17,opt,name=moneyPot1,proto3" json:"moneyPot1,omitempty"`
	MoneyPot2            int64              `protobuf:"varint,18,opt,name=moneyPot2,proto3" json:"moneyPot2,omitempty"`
	MoneyPot3            int64              `protobuf:"varint,19,opt,name=moneyPot3,proto3" json:"moneyPot3,omitempty"`
	MoneyPot4            int64              `protobuf:"varint,20,opt,name=moneyPot4,proto3" json:"moneyPot4,omitempty"`
	MoneyPot5            int64              `protobuf:"varint,21,opt,name=moneyPot5,proto3" json:"moneyPot5,omitempty"`
	WinType              int32              `protobuf:"varint,22,opt,name=winType,proto3" json:"winType,omitempty"`
	PairType             int32              `protobuf:"varint,23,opt,name=pairType,proto3" json:"pairType,omitempty"`
	Pid                  int32              `protobuf:"varint,24,opt,name=pid,proto3" json:"pid,omitempty"`
	OnlineCount          int32              `protobuf:"varint,25,opt,name=onlineCount,proto3" json:"onlineCount,omitempty"`
	BetCount             int32              `protobuf:"varint,26,opt,name=betCount,proto3" json:"betCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BaccaratTableLog) Reset()         { *m = BaccaratTableLog{} }
func (m *BaccaratTableLog) String() string { return proto.CompactTextString(m) }
func (*BaccaratTableLog) ProtoMessage()    {}
func (*BaccaratTableLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_a074f28c2900ffa7, []int{2}
}

func (m *BaccaratTableLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BaccaratTableLog.Unmarshal(m, b)
}
func (m *BaccaratTableLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BaccaratTableLog.Marshal(b, m, deterministic)
}
func (m *BaccaratTableLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaccaratTableLog.Merge(m, src)
}
func (m *BaccaratTableLog) XXX_Size() int {
	return xxx_messageInfo_BaccaratTableLog.Size(m)
}
func (m *BaccaratTableLog) XXX_DiscardUnknown() {
	xxx_messageInfo_BaccaratTableLog.DiscardUnknown(m)
}

var xxx_messageInfo_BaccaratTableLog proto.InternalMessageInfo

func (m *BaccaratTableLog) GetUserLogs() []*BaccaratUserLog {
	if m != nil {
		return m.UserLogs
	}
	return nil
}

func (m *BaccaratTableLog) GetDealerCards() string {
	if m != nil {
		return m.DealerCards
	}
	return ""
}

func (m *BaccaratTableLog) GetPlayerCards() string {
	if m != nil {
		return m.PlayerCards
	}
	return ""
}

func (m *BaccaratTableLog) GetSettleTime() int32 {
	if m != nil {
		return m.SettleTime
	}
	return 0
}

func (m *BaccaratTableLog) GetRoundId() int64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func (m *BaccaratTableLog) GetDealerPoints() int32 {
	if m != nil {
		return m.DealerPoints
	}
	return 0
}

func (m *BaccaratTableLog) GetPlayerPoints() int32 {
	if m != nil {
		return m.PlayerPoints
	}
	return 0
}

func (m *BaccaratTableLog) GetMoneyPot1() int64 {
	if m != nil {
		return m.MoneyPot1
	}
	return 0
}

func (m *BaccaratTableLog) GetMoneyPot2() int64 {
	if m != nil {
		return m.MoneyPot2
	}
	return 0
}

func (m *BaccaratTableLog) GetMoneyPot3() int64 {
	if m != nil {
		return m.MoneyPot3
	}
	return 0
}

func (m *BaccaratTableLog) GetMoneyPot4() int64 {
	if m != nil {
		return m.MoneyPot4
	}
	return 0
}

func (m *BaccaratTableLog) GetMoneyPot5() int64 {
	if m != nil {
		return m.MoneyPot5
	}
	return 0
}

func (m *BaccaratTableLog) GetWinType() int32 {
	if m != nil {
		return m.WinType
	}
	return 0
}

func (m *BaccaratTableLog) GetPairType() int32 {
	if m != nil {
		return m.PairType
	}
	return 0
}

func (m *BaccaratTableLog) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *BaccaratTableLog) GetOnlineCount() int32 {
	if m != nil {
		return m.OnlineCount
	}
	return 0
}

func (m *BaccaratTableLog) GetBetCount() int32 {
	if m != nil {
		return m.BetCount
	}
	return 0
}

type BaccaratUserLog struct {
	SettleTime           int32    `protobuf:"varint,1,opt,name=settleTime,proto3" json:"settleTime,omitempty"`
	RoundId              int64    `protobuf:"varint,2,opt,name=roundId,proto3" json:"roundId,omitempty"`
	MoneyPot1            int64    `protobuf:"varint,3,opt,name=moneyPot1,proto3" json:"moneyPot1,omitempty"`
	MoneyPot2            int64    `protobuf:"varint,4,opt,name=moneyPot2,proto3" json:"moneyPot2,omitempty"`
	MoneyPot3            int64    `protobuf:"varint,5,opt,name=moneyPot3,proto3" json:"moneyPot3,omitempty"`
	MoneyPot4            int64    `protobuf:"varint,6,opt,name=moneyPot4,proto3" json:"moneyPot4,omitempty"`
	MoneyPot5            int64    `protobuf:"varint,7,opt,name=moneyPot5,proto3" json:"moneyPot5,omitempty"`
	WinPot1              int64    `protobuf:"varint,8,opt,name=winPot1,proto3" json:"winPot1,omitempty"`
	WinPot2              int64    `protobuf:"varint,9,opt,name=winPot2,proto3" json:"winPot2,omitempty"`
	WinPot3              int64    `protobuf:"varint,10,opt,name=winPot3,proto3" json:"winPot3,omitempty"`
	WinPot4              int64    `protobuf:"varint,11,opt,name=winPot4,proto3" json:"winPot4,omitempty"`
	WinPot5              int64    `protobuf:"varint,12,opt,name=winPot5,proto3" json:"winPot5,omitempty"`
	Uid                  int32    `protobuf:"varint,13,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BaccaratUserLog) Reset()         { *m = BaccaratUserLog{} }
func (m *BaccaratUserLog) String() string { return proto.CompactTextString(m) }
func (*BaccaratUserLog) ProtoMessage()    {}
func (*BaccaratUserLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_a074f28c2900ffa7, []int{3}
}

func (m *BaccaratUserLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BaccaratUserLog.Unmarshal(m, b)
}
func (m *BaccaratUserLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BaccaratUserLog.Marshal(b, m, deterministic)
}
func (m *BaccaratUserLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaccaratUserLog.Merge(m, src)
}
func (m *BaccaratUserLog) XXX_Size() int {
	return xxx_messageInfo_BaccaratUserLog.Size(m)
}
func (m *BaccaratUserLog) XXX_DiscardUnknown() {
	xxx_messageInfo_BaccaratUserLog.DiscardUnknown(m)
}

var xxx_messageInfo_BaccaratUserLog proto.InternalMessageInfo

func (m *BaccaratUserLog) GetSettleTime() int32 {
	if m != nil {
		return m.SettleTime
	}
	return 0
}

func (m *BaccaratUserLog) GetRoundId() int64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func (m *BaccaratUserLog) GetMoneyPot1() int64 {
	if m != nil {
		return m.MoneyPot1
	}
	return 0
}

func (m *BaccaratUserLog) GetMoneyPot2() int64 {
	if m != nil {
		return m.MoneyPot2
	}
	return 0
}

func (m *BaccaratUserLog) GetMoneyPot3() int64 {
	if m != nil {
		return m.MoneyPot3
	}
	return 0
}

func (m *BaccaratUserLog) GetMoneyPot4() int64 {
	if m != nil {
		return m.MoneyPot4
	}
	return 0
}

func (m *BaccaratUserLog) GetMoneyPot5() int64 {
	if m != nil {
		return m.MoneyPot5
	}
	return 0
}

func (m *BaccaratUserLog) GetWinPot1() int64 {
	if m != nil {
		return m.WinPot1
	}
	return 0
}

func (m *BaccaratUserLog) GetWinPot2() int64 {
	if m != nil {
		return m.WinPot2
	}
	return 0
}

func (m *BaccaratUserLog) GetWinPot3() int64 {
	if m != nil {
		return m.WinPot3
	}
	return 0
}

func (m *BaccaratUserLog) GetWinPot4() int64 {
	if m != nil {
		return m.WinPot4
	}
	return 0
}

func (m *BaccaratUserLog) GetWinPot5() int64 {
	if m != nil {
		return m.WinPot5
	}
	return 0
}

func (m *BaccaratUserLog) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func init() {
	proto.RegisterEnum("command.WinType", WinType_name, WinType_value)
	proto.RegisterType((*SlotsDebug)(nil), "command.SlotsDebug")
	proto.RegisterType((*SlotsLog)(nil), "command.SlotsLog")
	proto.RegisterType((*BaccaratTableLog)(nil), "command.BaccaratTableLog")
	proto.RegisterType((*BaccaratUserLog)(nil), "command.BaccaratUserLog")
}

func init() { proto.RegisterFile("php.proto", fileDescriptor_a074f28c2900ffa7) }

var fileDescriptor_a074f28c2900ffa7 = []byte{
	// 971 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x56, 0xdb, 0x72, 0x23, 0x35,
	0x10, 0xc5, 0xf1, 0x5d, 0xb6, 0xb3, 0x5e, 0x01, 0x8b, 0x36, 0x2c, 0x8b, 0x31, 0x4b, 0x30, 0x3c,
	0xa4, 0x6a, 0x27, 0xce, 0x07, 0x6c, 0xc2, 0x92, 0x72, 0x95, 0x73, 0xa9, 0x49, 0xb6, 0xf2, 0x48,
	0x8d, 0x3d, 0xc2, 0x2b, 0x18, 0x4b, 0x53, 0x33, 0x9a, 0x4d, 0xe5, 0x5b, 0xf8, 0x03, 0xfe, 0x8f,
	0x77, 0xaa, 0xbb, 0xe7, 0xa2, 0x31, 0x94, 0xdf, 0xa6, 0xcf, 0x39, 0x6a, 0x49, 0x47, 0xad, 0xd6,
	0xb0, 0x7e, 0xfc, 0x31, 0x3e, 0x89, 0x13, 0x63, 0x0d, 0xef, 0xae, 0xcd, 0x76, 0x1b, 0xe8, 0xf0,
	0x68, 0xb8, 0x8e, 0x94, 0xd4, 0x96, 0xe0, 0xa9, 0xc7, 0xd8, 0x5d, 0x64, 0x6c, 0xfa, 0x8b, 0x5c,
	0x65, 0x1b, 0x3e, 0x66, 0xcd, 0xad, 0x0a, 0x45, 0x63, 0xd2, 0x98, 0xb5, 0x7d, 0xf8, 0xe4, 0x9c,
	0xb5, 0x74, 0xb0, 0x95, 0xe2, 0x60, 0xd2, 0x98, 0xf5, 0x7d, 0xfc, 0x9e, 0xfe, 0xc5, 0x58, 0x0f,
	0x07, 0x2d, 0x0d, 0x0e, 0x89, 0xab, 0x21, 0xb1, 0x0a, 0xf9, 0x11, 0xeb, 0xa5, 0x32, 0xf9, 0x24,
	0x93, 0x45, 0x88, 0xc3, 0xda, 0x7e, 0x19, 0x73, 0xc1, 0xba, 0xf6, 0xa3, 0xdc, 0xca, 0x45, 0x28,
	0x9a, 0x48, 0x15, 0x21, 0xe4, 0xc9, 0x54, 0x28, 0x5a, 0x94, 0x27, 0x53, 0x21, 0x7f, 0xc5, 0xfa,
	0x59, 0x2a, 0x93, 0x2b, 0xa3, 0xe5, 0x93, 0x68, 0x4f, 0x1a, 0xb3, 0xa6, 0x5f, 0x01, 0xc0, 0x46,
	0x4a, 0xcb, 0x0b, 0x93, 0x69, 0x2b, 0x3a, 0x38, 0xaa, 0x02, 0xf8, 0x94, 0x0d, 0x21, 0x38, 0x97,
	0x96, 0x86, 0x77, 0x71, 0x78, 0x0d, 0xe3, 0x6f, 0xd8, 0xc8, 0x1a, 0x1b, 0x44, 0xa5, 0xa8, 0x87,
	0xa2, 0x3a, 0xc8, 0x7f, 0x62, 0x9d, 0x44, 0xa6, 0x59, 0x64, 0x45, 0x7f, 0xd2, 0x9c, 0x0d, 0xbc,
	0xe7, 0x27, 0xb9, 0x91, 0x27, 0x68, 0xc1, 0x85, 0x89, 0xfc, 0x5c, 0xc0, 0x67, 0xac, 0x0d, 0x13,
	0xa4, 0x82, 0xa1, 0x92, 0xd7, 0x95, 0x4b, 0xa5, 0xa5, 0x4f, 0x02, 0x70, 0xd5, 0x84, 0x61, 0x2a,
	0x06, 0xb8, 0x6e, 0xfc, 0x06, 0xdb, 0x1e, 0x95, 0xa6, 0x95, 0x0c, 0x71, 0x25, 0x65, 0xcc, 0x8f,
	0x59, 0xfb, 0xf1, 0xfe, 0x29, 0x96, 0x62, 0x34, 0x69, 0xcc, 0x0e, 0xbd, 0x71, 0x99, 0xf9, 0x41,
	0x69, 0xc0, 0x7d, 0xa2, 0xf9, 0x0b, 0xd6, 0x51, 0xe9, 0xaf, 0x89, 0x94, 0xe2, 0x10, 0x33, 0xe7,
	0x11, 0xd8, 0xb1, 0x31, 0x16, 0x3e, 0xd7, 0xe8, 0xd7, 0x33, 0x64, 0x6b, 0x18, 0xd8, 0x91, 0xc8,
	0x14, 0x01, 0x32, 0x75, 0x8c, 0xa2, 0x3a, 0x08, 0x99, 0xd0, 0x1f, 0x40, 0x1e, 0x94, 0x16, 0xcf,
	0xc9, 0x58, 0x17, 0xe3, 0x13, 0x36, 0xf8, 0x23, 0x58, 0xff, 0x19, 0x1b, 0x8b, 0x6b, 0xe6, 0x98,
	0xc7, 0x85, 0x20, 0x4b, 0x1e, 0xd2, 0x7e, 0x3f, 0xa7, 0x2c, 0x2e, 0xc6, 0x67, 0xec, 0xd9, 0x22,
	0xbd, 0x8d, 0x82, 0xa7, 0xbb, 0x6d, 0x10, 0x45, 0x97, 0x50, 0x84, 0x5f, 0x60, 0xa6, 0x5d, 0x98,
	0x1f, 0xb3, 0xc3, 0x32, 0x78, 0x7b, 0x03, 0xbe, 0x7e, 0x89, 0xc2, 0x1d, 0x14, 0x76, 0x58, 0x21,
	0xb0, 0xf8, 0x17, 0x74, 0xe0, 0x35, 0xb0, 0x9e, 0x0d, 0x37, 0xf0, 0x15, 0xd6, 0xfe, 0x0e, 0x5a,
	0xd3, 0x79, 0x38, 0xab, 0xd8, 0x99, 0xd5, 0xfb, 0xcf, 0xac, 0x1e, 0xcc, 0xfa, 0x72, 0x67, 0x56,
	0x6f, 0x77, 0x56, 0x0f, 0x67, 0x3d, 0xda, 0x99, 0x15, 0x51, 0xb8, 0x40, 0x89, 0xc9, 0x74, 0xb8,
	0x08, 0xc5, 0xd7, 0x74, 0x81, 0xf2, 0x90, 0xbf, 0x66, 0x6c, 0x65, 0x74, 0x96, 0xd2, 0xe1, 0xbd,
	0x42, 0xd2, 0x41, 0xc0, 0xf3, 0x74, 0x1d, 0x58, 0x2b, 0x13, 0x52, 0x7c, 0x43, 0x35, 0xe0, 0x62,
	0x70, 0xa9, 0x1e, 0x55, 0x14, 0x92, 0xe0, 0x35, 0x5d, 0xaa, 0x12, 0x80, 0x73, 0x5d, 0xa9, 0xcd,
	0x43, 0x51, 0xa4, 0xdf, 0xe2, 0x3e, 0x5c, 0x08, 0x14, 0xbf, 0xcb, 0xc0, 0x66, 0x89, 0xc4, 0x2d,
	0x4c, 0x70, 0x0b, 0x2e, 0x04, 0x95, 0x9f, 0x98, 0x48, 0x8a, 0xef, 0xa8, 0xf2, 0xe1, 0x1b, 0x2a,
	0x3f, 0x0a, 0xf4, 0x26, 0x0b, 0x36, 0x52, 0x4c, 0x71, 0x48, 0x19, 0x63, 0x33, 0x89, 0x95, 0xbe,
	0x57, 0x5b, 0x29, 0xbe, 0xcf, 0x9b, 0x49, 0x1e, 0x43, 0xae, 0x4c, 0xab, 0x50, 0xbc, 0xa1, 0x5c,
	0xf0, 0x5d, 0x34, 0x8d, 0xa5, 0xfc, 0x24, 0x23, 0xf1, 0x03, 0xed, 0xa0, 0x04, 0x80, 0x55, 0xe9,
	0x85, 0xd1, 0x36, 0x31, 0x91, 0x38, 0x26, 0xb6, 0x04, 0xe0, 0xa4, 0x54, 0x7a, 0x13, 0x4b, 0x5d,
	0x28, 0x7e, 0xa4, 0x1b, 0x50, 0x03, 0xc1, 0x67, 0xba, 0x55, 0x17, 0x41, 0x12, 0x8a, 0x19, 0xf9,
	0x5c, 0x21, 0xd3, 0xbf, 0x5b, 0x6c, 0x7c, 0x1e, 0xac, 0xd7, 0x41, 0x12, 0xd8, 0xfb, 0x60, 0x15,
	0x49, 0xe8, 0x92, 0x73, 0xd6, 0xc3, 0x55, 0x98, 0x4d, 0x2a, 0x1a, 0xd8, 0x1d, 0x44, 0x79, 0x87,
	0x0b, 0xf1, 0x07, 0x12, 0xf8, 0xa5, 0x12, 0xec, 0x0c, 0x65, 0x10, 0xc9, 0x04, 0x12, 0x53, 0xb7,
	0xe8, 0xfb, 0x2e, 0x04, 0x8a, 0x38, 0x0a, 0x9e, 0x0a, 0xc5, 0x90, 0x14, 0x0e, 0x04, 0xcb, 0x4d,
	0xa5, 0xb5, 0x91, 0x44, 0x0b, 0x47, 0xb4, 0xdc, 0x0a, 0x71, 0x0b, 0xea, 0x10, 0x0f, 0xb4, 0x2c,
	0xa8, 0x29, 0x1b, 0xd2, 0x54, 0xb7, 0x46, 0x69, 0x9b, 0x16, 0x4d, 0xc3, 0xc5, 0x40, 0x43, 0x93,
	0xe5, 0x1a, 0xea, 0x19, 0x35, 0x0c, 0x4c, 0xdf, 0x42, 0x75, 0xdc, 0x1a, 0xfb, 0x36, 0xef, 0x17,
	0x15, 0xe0, 0xb2, 0x1e, 0xb6, 0x0a, 0x87, 0xf5, 0x5c, 0xf6, 0x34, 0xef, 0x12, 0x15, 0xe0, 0xb2,
	0x73, 0x6c, 0x0e, 0x0e, 0x3b, 0x77, 0xd9, 0x33, 0xec, 0x08, 0x0e, 0x7b, 0x06, 0xfb, 0x7e, 0xa4,
	0xe6, 0x89, 0x6d, 0xa0, 0xed, 0x17, 0x21, 0x94, 0x5c, 0x1c, 0xa8, 0xa4, 0xbc, 0xfa, 0x6d, 0xbf,
	0x8c, 0x8b, 0xd7, 0x4e, 0x54, 0xaf, 0xdd, 0x84, 0x0d, 0x8c, 0xae, 0x5e, 0xa2, 0x97, 0xd4, 0xec,
	0x1c, 0x08, 0xf2, 0xad, 0xa4, 0x25, 0xfa, 0x88, 0xf2, 0x15, 0xf1, 0xf4, 0x9f, 0x03, 0xf6, 0x6c,
	0xe7, 0xfc, 0x77, 0x4e, 0xac, 0xb1, 0xef, 0xc4, 0x0e, 0xea, 0x27, 0x56, 0x73, 0xba, 0xb9, 0xd7,
	0xe9, 0xd6, 0x5e, 0xa7, 0xdb, 0x7b, 0x9d, 0xee, 0xec, 0x75, 0xba, 0xfb, 0xff, 0x4e, 0xe3, 0x9a,
	0xe8, 0x85, 0x2d, 0xc2, 0x8a, 0xf1, 0x44, 0xdf, 0x65, 0xbc, 0x8a, 0x39, 0x15, 0xcc, 0x65, 0x4e,
	0x2b, 0x66, 0x8e, 0xf7, 0xa1, 0x64, 0xe6, 0x15, 0x73, 0x96, 0xbf, 0x9f, 0x45, 0x58, 0xfc, 0x5b,
	0x8c, 0xca, 0x7f, 0x8b, 0x9f, 0xaf, 0x59, 0x37, 0x7f, 0x3a, 0x39, 0x63, 0x9d, 0xeb, 0x9b, 0xdf,
	0x1e, 0x16, 0xd7, 0xe3, 0xcf, 0xf8, 0x88, 0xf5, 0xef, 0xae, 0xde, 0x2d, 0x97, 0x18, 0x36, 0xf8,
	0x80, 0x75, 0xcf, 0x17, 0x97, 0x18, 0x1c, 0xf0, 0x21, 0xeb, 0x5d, 0xbd, 0xbf, 0x7c, 0x87, 0x51,
	0x13, 0x95, 0x1f, 0x6e, 0xdf, 0xfb, 0x18, 0xb6, 0x56, 0x1d, 0xfc, 0x9b, 0x3a, 0xfd, 0x37, 0x00,
	0x00, 0xff, 0xff, 0xa8, 0x18, 0xba, 0xc8, 0x71, 0x09, 0x00, 0x00,
}
